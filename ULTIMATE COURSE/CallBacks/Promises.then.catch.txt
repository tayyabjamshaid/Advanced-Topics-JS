let promise = new Promise(function (resolve, reject) {
  console.log("I AM PENDING");
  setTimeout(() => {
    console.log("I AM Promise 1");
    resolve(5);
  });
});
let promise2 = new Promise(function (resolve, reject) {
  console.log("I AM PENDING");
  setTimeout(() => {
    console.log("I AM Promise 2");
    reject(new Error("I am Error"));
  });
});
promise.then((data) => console.log(data));
//error na throw kry is lye hum catch ka use kry gy wrna error throw kr dy ga
promise2.catch((error) => console.log(error));

OUTPUT:
I AM PENDING
I AM PENDING
I AM Promise 1
 5
 I AM Promise 2
 Error: I am Error
    at variables.js:12:12
    ------------------------------------------------------------
    Promise Chaining .then calls
    Promise Chaining means humny ek promise bnaya,usko .then sy resolve kya ,phr us k andr dobara promise ko return kr dia,ab wo jo promise return kr rha ha,ab us ko resolve kro etc
    Example 1:
    let promise = new Promise(function (resolve, reject) {
  console.log("I AM PENDING");
  setTimeout(() => {
    resolve(5);
  }, 2000);
});
promise
  .then((value) => {
    console.log(value);
    let p2 = new Promise((resolve, reject) => {
      resolve(45);
    });
    return p2;  // here we again return promise 
  })
  .then((value) => {
    console.log(value);
    return "kesAAAAA";  //here again return promise
  })
  .then((value) => {
    console.log(value);
  });
  Output:
  I AM PENDING
  5
  45
  kesAAAAA



  Example 2:
  const loadScript = (src) => {
  return new Promise((resolve, reject) => {
    let script = document.createElement("script");
    script.type = "text/javascript";
    script.src = src;
    document.body.append(script);
    script.onload = () => {
      console.log("in onload");
      resolve("RESOLVED");
    };
    script.onerror = () => {
      console.log("in error");

      reject(new Error("Script Reject"));
    };
  });
};
let p1 = loadScript(
  "https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"
);
p1.then((value) => {
  console.log(value);
  return loadScript(
    "https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"
  );
})
  .then((value) => console.log("2 ", value))
  .catch((error) => console.log(error)); 


-------------------------------------------------------------
Attaching Multiple Handlers
It means use multiple thens on one promise
let p1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(1);
  }, 2000);
});
p1.then(() => {
  console.log("Congratulations,Your Promise is now Resolve");
});   //it will run first
p1.then(() => {
  console.log("Hi");
}); //it will run second
