Static Methods
It is not related to a particular object,it is related to whole class

Example 1:
//we can use static method in class function 
class Animal {
  constructor(name) {
    this.name = name;
  }
  walk() {   
    console.log("Animal " + Animal.capitalize(this.name) + " is walking");
  }
  static capitalize(name) {  //here
    return name.charAt(0).toUpperCase() + name.substr(1, name.length);
  }
}
let data = new Animal("lion");
data.walk();

Example 2:
We can use static method while initializing the object

class Animal {
  constructor(name) {
    this.name = name;
  }
  walk() {
    console.log("Animal " + this.name + " is walking");
  }
  static capitalize(name) {
    return name.charAt(0).toUpperCase() + name.substr(1, name.length);
  }
}
let data = new Animal(Animal.capitalize("lion"));  //here
data.walk();

Example 3:
We can use static method in constructor

class Animal {
  constructor(name) {
    this.name = Animal.capitalize(name);  //here
  }
  walk() {
    console.log("Animal " + this.name + " is walking");
  }
  static capitalize(name) {
    return name.charAt(0).toUpperCase() + name.substr(1, name.length);
  }
}
let data = new Animal("lion");
data.walk();

Example 4:
Objects cannot directly access static methods,it will give error
class Animal {
  constructor(name) {
    this.name = Animal.capitalize(name);
  }
  walk() {
    console.log("Animal " + this.name + " is walking");
  }
  static capitalize(name) {
    return name.charAt(0).toUpperCase() + name.substr(1, name.length);
  }
}
let data = new Animal("lion");
data.walk();
data.capitalize("snake");// result :Uncaught TypeError: data.capitalize is not a function

NOTE:

=>We cannot use static method by using this keyword,becoz this method is not for any particular object,it is a class method
constructor(name) {
    this.name = this.capitalize(name);  //wrong,you can access it only using class name
  }

=>Also,we cannot directly call static method
constructor(name) {
    this.name = capitalize(name);  //wrong,you can access it only using class name
  }
