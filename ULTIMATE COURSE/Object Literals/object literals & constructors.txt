NOTE: (this k mutaliq general pta huna chahiye)
Case 1:Alone, this refers to the global object.
Scenario:
<script>
console.log(this) 
//it refers to the global object(window),so it shows window 
</script>

Case 2:In a regular function or in nested function, this refers to the global object.
Scenario:
function data() {
  console.log(this); //it refers to the global object(window),so it shows window 
}
data();

Case 3:In an object method, this refers to the object,not window object.
Scenario:
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName: function() {
    return this.firstName + " " + this.lastName;     //it refers to that object
  }
};

Case 4:
In strict mode,We cannot access window object by this in plain function
<script>
"use strict";
function data() {
  console.log(this);    //gives undefined
}
data();
</script>
----------------------------------------
We can made our object by 2 ways
1-Object liberal
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
};

2-Constructors
function givenCar(name, speed) {
  this.carName = name;
  this.carSpeed = speed;
  this.runCar = () => {
    console.log(`${this.carName} is running`);
  };
}

//new keyword ka use hum constructor k zariye object bnaiy k lye krty ha
let car1 = new givenCar("tayyab", 99);
console.log(car1.runCar());

//hum direct kbi b constructor function me kuch add/update ni kr skty
//but we can add any key in its object,ye srf usi object me change show kry ga
Constructor functions ka use kr k hum apny object oriented programming ko bohat easy bna skty ha
It stops code repitative,Constructor function 1 bna liye,ab us k object bnaty jao

